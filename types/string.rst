.. _Character Types:

***************
Character Types
***************


``str``
=======
* ``"`` and ``'`` works the same
* Defining ``str``:

    .. code-block:: python

        name = 'Jos√©'       # 'Jos√©'
        name = "Jos√©"       # 'Jos√©'

        name: str = 'Jos√©'  # 'Jos√©'
        name: str = "Jos√©"  # 'Jos√©'

* ``str`` multiplication:

    .. code-block:: python

        'Jos√©' * 3          # Jos√©Jos√©Jos√©

* ``str()`` converts argument to ``str``":

    .. code-block:: python

        str(1969)           # '1969'
        str(13.37)          # '13.37'

* Multiline ``str``

    .. code-block:: python

        names = """
            Jos√© Jim√©nez
            Max Peck
            –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á
        """
        # '\n    Jos√© Jim√©nez\n    Max Peck\n    –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á\n'


Single or double quote?
=======================
* ``"`` and ``'`` works the same
* Choose one and keep consistency in code
* Python console uses ``'``, this is why I use ``'`` in this book
* ``doctest`` uses single quotes and throws error on double quotes
* Avoid single quotes, when ``str`` has a lot of contractions:

    .. code-block:: python

        my_str = 'it\'s Jos√©\'s book'
        my_str = "it's Jos√©'s book"

* HTML uses double quotes, hence it's convenient to use single ones for ``str``:

    .. code-block:: python

        my_str = '<a href="http://python.astrotech.io">Python and Machine Learning</a>'

Escape characters
=================
.. code-block:: text

    \n
    \r\n

.. figure:: img/type-machine.jpg
    :scale: 25%
    :align: center

    Why we have '\\r\\n' on Windows?

.. code-block:: text

    \x1F680     # after \x goes hexadecimal number
    \U0001F680  # after \u goes four hexadecimal numbers
    üöÄ
    \b1010      # after \b goes bytes
    \t
    \'

Characters before strings
=========================
* Format string: since Python 3.6

.. csv-table:: String modifiers
    :header-rows: 1
    :widths: 15, 30, 55
    :file: data/str-modifiers.csv

.. code-block:: python

    name = 'Jos√© Jim√©nez'

    f'My name... {name}'
    u'za≈º√≥≈Çƒá gƒô≈õlƒÖ ja≈∫≈Ñ'
    b'this is text'
    r'(?P<foo>)\n'
    r'C:\Users\Admin\file.txt'

.. code-block:: python

    print('C:\Users\Admin\file.txt')
    # ``\Users`` (``s`` is invalid hexadecimal for unicode)
    # SyntaxError: (unicode error) 'unicodeescape' codec can't decode bytes in position 2-3: truncated \UXXXXXXXX escape


``print()``
===========
* Prints on the screen
* More in :ref:`Print Formatting`

.. code-block:: python

    print('My name... Jos√© Jim√©nez')  # My name... Jos√© Jim√©nez

    name = 'Jos√© Jim√©nez'
    print(f'My name... {name}')       # My name... Jos√© Jim√©nez


String immutability
===================
* ``str`` is immutable
* ``str`` methods create a new modified ``str``
* How many ``str`` are in the memory?
* f-string formatting are preferred over ``str`` addition

    .. code-block:: python

        first_name = 'Jos√©'
        last_name = 'Jim√©nez'

        print(first_name + ' ' + last_name)  # Jos√© Jim√©nez
        print(f'{first_name} {last_name}')   # Jos√© Jim√©nez


String methods
==============

``split()``
-----------
.. code-block:: python

    text = 'Jos√© Jim√©nez'
    text.split()        # ['Jos√©', 'Jim√©nez']

    text = 'Max,Peck'
    text.split(',')     # ['Max', 'Peck']

``strip()``, ``lstrip()``, ``rstrip()``
---------------------------------------
.. code-block:: python

    name = '    Max Peck    '

    name.strip()        # 'Max Peck'
    name.lstrip()       # 'Max Peck    '
    name.rstrip()       # '    Max Peck'

``startswith()``
----------------
* Understand this as ``starts_with``

.. code-block:: python

    name = 'Jos√© Jim√©nez'

    if name.startswith('Jos√©'):
        print('My name... Jos√© Jim√©nez')
    else:
        print('I have no name')

``join()``
----------
.. code-block:: python

    names = ['Jos√©', 'Max', '–ò–≤–∞–Ω', str(1961), '1969']

    ';'.join(names)
    # 'Jos√©;Max;–ò–≤–∞–Ω;1961;1969'

``title()``, ``lower()``, ``upper()``
-------------------------------------
* Unify data format before analysis
* Example:

    * 'Jana III Sobieskiego 1/2'
    * 'ul Jana III Sobieskiego 1/2'
    * 'ul. Jana III Sobieskiego 1/2'
    * 'Ul. Jana III Sobieskiego 1/2'
    * 'UL. Jana III Sobieskiego 1/2'
    * 'ulica Jana III Sobieskiego 1/2'
    * 'Ulica. Jana III Sobieskiego 1/2'
    * 'os. Jana III Sobieskiego 1/2'
    * 'plac Jana III Sobieskiego 1/2'
    * 'pl Jana III Sobieskiego 1/2'
    * 'al Jana III Sobieskiego 1/2'
    * 'Jana 3 Sobieskiego 1/2'
    * 'Jana 3ego Sobieskiego 1/2'
    * 'Jana III Sobieskiego 1 m. 2'
    * 'Jana III Sobieskiego 1 apt 2'
    * 'Jana Iii Sobieskiego 1/2'
    * 'Jana IIi Sobieskiego 1/2'
    * 'Jana lll Sobieskiego 1/2'  # three small letters 'L'
    * 'Kozia w√≥lka 5'
    * ...

.. code-block:: python

    name = 'joS√© jiM√©nEz III'

    name.title()    # 'Jos√© Jim√©nez Iii'
    name.upper()    # 'JOS√â JIM√âNEZ III'
    name.lower()    # 'jos√© jim√©nez iii'

``replace()``
-------------
.. code-block:: python

    name = 'Jos√© Jim√©nez'
    name.replace('J', 'j')  # 'jos√© jim√©nez'


String splicing
===============
.. code-block:: python

    text = 'Lorem ipsum'

    text[2]      # 'r'
    text[0:3]    # 'Lor'
    text[:3]     # 'Lor'
    text[1:4]    # 'ore'
    text[-3]     # 's'
    text[-3:]    # 'sum'
    text[-3:-1]  # 'su'
    text[:-2]    # 'Lorem ips'

    text[::2]    # 'Lrmism'
    text[::-1]   # 'muspi meroL'
    text[::-2]   # 'msimrL'


Handling user input
===================
* ``input()`` returns ``str``
* Space at the end of prompt

.. code-block:: python

    name = input('Type your name: ')


Assignments
===========

Variables and types
-------------------
#. Wczytaj od u≈ºytkownika imiƒô
#. U≈ºytkownik wprowadza tylko dane typu ``str``
#. Za pomocƒÖ f-string formatting wy≈õwietl na ekranie:

    .. code-block:: text

        '''My name... "Jos√© Jim√©nez".
	        I'm an """astronaut!"""'''

#. Druga linijka zaczyna siƒô od tabulacji
#. Gdzie warto≈õƒá w podw√≥jnym cudzys≈Çowiu to ciƒÖg od u≈ºytkownika (w przyk≈Çadzie u≈ºytkownik wpisa≈Ç ``Jos√© Jim√©nez``)
#. Zwr√≥ƒá uwagƒô na znaki apostrof√≥w, cudzys≈Çow√≥w, tabulacji i nowych linii
#. W ciƒÖgu do wy≈õwietlenia nie u≈ºywaj spacji ani enter√≥w - u≈ºyj ``\n`` i ``\t``
#. Tekst wy≈õwietlony na ekranie ma mieƒá zamienione wszystkie spacje na ``_``
#. Nie korzystaj z dodawania string√≥w ``str + str``
#. Nastƒôpnie zn√≥w wy≈õwietl na ekranie wynik, tym razem z podmienionymi spacjami:

    .. code-block:: text

        '''My_name_"Jos√©_Jim√©nez".
        _I'm_an_"""astronaut!"""'''

:About:
    * Filename: ``types_input.py``
    * Lines of code to write: 4 lines
    * Estimated time of completion: 10 min

:The whys and wherefores:
    * Definiowanie zmiennych
    * Korzystanie z print formatting
    * Wczytywanie tekstu od u≈ºytkownika
